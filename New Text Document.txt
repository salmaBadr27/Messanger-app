    
        get("/hello", (req, res) -> "Hello World");
//        post("/login", (req, res) -> {
////            try {
////                String userinfo = req.body();
////                User realUser = auth.AuthenticateWithJson(userMySQLRepository, userinfo);
////                String token = auth.generateToken(userinfo);
//////                res.header("token", token);
////                realUser.setToken(token);
////                return gson.toJson(realUser);
////                if (realUser == null) {
////                    res.status(401);
////                    return "not user ? sign up now";
////                }
//
////                res.header("token", token);
////                res.header("Access-Control-Allow-Origin", "http://localhost:4567");
////                res.header("Access-Control-Allow-Methods", "POST, GET, OPTIONS, DELETE");
////                res.header("Access-Control-Allow-Origin", "Content-Type, Authorization, Content-Length, X-Requested-With");
////                res.header("Access-Control-Allow-Credentials", "true");
////            } catch (AuthenticationError | DataBaseError ex) {
////                return ex;
////            }
//            return "you ara in login api";
//        });
//        // sign up 
//        post("/Signup", (req, res) -> {
////            try {
////                String userinfo = req.body();
////                User fakeUser = gson.fromJson(userinfo, User.class);
////                User newUser = userMySQLRepository.addUser(fakeUser.getUserName(), fakeUser.getPassword(), fakeUser.getE_mail(), fakeUser.getMobileNum());
//////                if (newUser == null) {
//////                    res.status(401);
//////                    return " user name exist";
//////                }
////                String token = auth.generateToken(userinfo);
////                res.header("token", token);
////                newUser.setToken(token);
////                return gson.toJson(newUser);
////            } catch (DataBaseError e) {
////                return e;
////            }
//            return "signup api";
//
//        });
//
////        delete user by user name 
//        delete("/User", (req, res) -> {
//
////            try {
////
////                String token = req.headers("Authentication");
////                User isUser = auth.AuthenticateWithToken(userMySQLRepository, token);
//////                if (isUser == null) {
//////                    return " unauthenticated";
//////                }
////
////                User DeletedUser = userMySQLRepository.removeUserByUserName(isUser.getUserName());
////
////                return gson.toJson(DeletedUser);
////
////            } catch (DataBaseError | AuthenticationError e) {
////
////                return e;
////            }
//            return "delete user apo";
//
//        });
//
//        //get allusers
//        post("/Users", (req, res) -> {
////            try {
////                //String token = req.headers("Authentication");
////                String token = req.body();
////                User isUser = auth.AuthenticateWithToken(userMySQLRepository, token);
////                ArrayList<User> allUsers = userMySQLRepository.getAllUsers();
////                return gson.toJson(allUsers);
////
//////                System.out.println("token : " + token);
//////                System.out.println("isUser : " + isUser);
//////                if (isUser == null) {
//////                    return "unauthenticated";
//////                }
//////                if (allUsers == null) {
//////                    return "there is no users";
//////                }
////            } catch (DataBaseError | AuthenticationError e) {
////                return e;
////            }
//            return "get all users api";
//
//        });
//        
//
//        // get all messages
//        post("/messages", (req, res) -> {
////            try {
////                String token = req.body();
////                User isUser = auth.AuthenticateWithToken(userMySQLRepository, token);
//////                if (isUser == null) {
//////                    res.status(401);
//////                    return "unauthenticated";
//////                }
////                String userName = isUser.getUserName();
////                ArrayList<Message> allMessages = msgMYSQLRepository.getAllMessages(userName);
////                System.out.print("messages: " + allMessages + "\n for user name: " + userName + "\n");
////                return gson.toJson(allMessages);
////
////            } catch (AuthenticationError | DataBaseError e) {
////
////                return e;
////            }
//            return "get all messages api";
//        });
//
//        // send message
//        post("/message", (req, res) -> {
////            try {
////                String newMessage = req.body();
////                Message sendedMessage = gson.fromJson(newMessage, Message.class);
////                // System.out.print("newMessage"+newMessage);
////                User isuser = auth.AuthenticateWithToken(userMySQLRepository, sendedMessage.getToken());
////                //System.out.print("sender"+isuser);
//////            if (isuser == null) {
//////                res.status(401);
//////                return "unauthenticated";
//////            }
////                User validReceiver = userMySQLRepository.getUserByUsername(sendedMessage.getReciver());
////                // System.out.print("rec"+validReceiver);
//////            if (validReceiver == null) {
//////                return "cannot find this user";
//////            }
////                Message sendMessage = msgMYSQLRepository.sendMessages(sendedMessage.getMessageBody(), isuser.getUserName(), sendedMessage.getReciver());
////
////                return gson.toJson(sendMessage);
////            } catch (DataBaseError | AuthenticationError e) {
////                return e;
////            }
//            return "send message api";
//        });
////
////        //get messages by sender 
//        get("Msgs/:username", (req, res) -> {
////            ArrayList<Message> sendedMessages = null;
////            try {
////                String token = req.headers("Authentication");
////                String isSender = req.params("username");
////                User isUser = auth.AuthenticateWithToken(userMySQLRepository, token);
//////            if (isUser == null) {
//////                res.status(401);
//////                return "unauthenticated";
//////            }
////                if (isSender.equals(isUser.getUserName())) {
////                    sendedMessages = msgMYSQLRepository.getMessageBySender(isSender);
////                }
////                return gson.toJson(sendedMessages);
////
////            } catch (DataBaseError | AuthenticationError e) {
////                return e;
////            }
//            return "this is message by " + ":usersname";
//        });
////
//        //remove messages by sender 
//        delete("messages/:sender", (req, res) -> {
////            ArrayList<Message> deletedMsgs = null;
////            try {
////                String token = req.headers("Authentication");
////                User isUser = auth.AuthenticateWithToken(userMySQLRepository, token);
////                String sender = req.params("sender");
//////            if (isUser == null) {
//////                res.status(401);
//////                return "unauthenticated";
//////            }
////                if (sender.equals(isUser.getUserName())) {
////                    deletedMsgs = msgMYSQLRepository.removeMessageBySender(sender);
////                    return gson.toJson(deletedMsgs);
////                }
////            } catch (DataBaseError | AuthenticationError e) {
////                return e;
////            }
////            return deletedMsgs;
//            return "delete messages";
//        });
//        //get all messages by user name
//        get("/Messages", (req, res) -> {
////            try {
////                String token = req.headers("Authentication");
////                System.out.print("token" + token);
////                User isUser = auth.AuthenticateWithToken(userMySQLRepository, token);
//////            if (isUser == null) {
//////                res.status(401);
//////                return "unauthenticated";
//////            }
////                String userName = isUser.getUserName();
////                ArrayList<Message> allMessages = msgMYSQLRepository.getAllMessages(userName);
////                return gson.toJson(allMessages);
////            } catch (DataBaseError | AuthenticationError e) {
////                return e;
////            }
//            return "get all messages by user name";
//        });